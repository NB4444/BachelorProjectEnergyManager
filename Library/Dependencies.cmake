include(ExternalProject)

# Configure SLURM
set(SLURM_ENABLED TRUE)
add_compile_definitions(SLURM_ENABLED="${SLURM_ENABLED}")
find_program(SLURM_SACCT sacct)
find_program(SLURM_SALLOC salloc)
find_program(SLURM_SATTACH sattach)
find_program(SLURM_SBATCH sbatch)
find_program(SLURM_SRUN srun)
find_program(SLURM_SCONTROL scontrol)
add_compile_definitions(SLURM_SACCT="${SLURM_SACCT}")
add_compile_definitions(SLURM_SALLOC="${SLURM_SALLOC}")
add_compile_definitions(SLURM_SATTACH="${SLURM_SATTACH}")
add_compile_definitions(SLURM_SBATCH="${SLURM_SBATCH}")
add_compile_definitions(SLURM_SRUN="${SLURM_SRUN}")
add_compile_definitions(SLURM_SCONTROL="${SLURM_SCONTROL}")
message(STATUS "SLURM sacct: ${SLURM_SACCT}")
message(STATUS "SLURM salloc: ${SLURM_SALLOC}")
message(STATUS "SLURM sattach: ${SLURM_SATTACH}")
message(STATUS "SLURM sbatch: ${SLURM_SBATCH}")
message(STATUS "SLURM srun: ${SLURM_SRUN}")
message(STATUS "SLURM scontrol: ${SLURM_SCONTROL}")

# Configure EAR
set(EAR_ENABLED TRUE)
add_compile_definitions(EAR_ENABLED="${EAR_ENABLED}")
set(EAR_DIRECTORY "/hpc/base/ctt/packages/EAR/ear")
set(EAR_INCLUDE_DIRECTORY "${EAR_DIRECTORY}/include")
set(EAR_LIBRARY_DIRECTORY "${EAR_DIRECTORY}/lib")
add_compile_definitions(EAR_LIBRARY_DIRECTORY="${EAR_LIBRARY_DIRECTORY}")
find_library(EAR_LIBRARY ear.seq PATHS "${EAR_LIBRARY_DIRECTORY}")
find_library(EAR_LIBRARY_DAEMON earld "${EAR_LIBRARY_DIRECTORY}")
find_library(EAR_LIBRARY_API ear_api "${EAR_LIBRARY_DIRECTORY}")
set(EAR_EACCT "${EAR_DIRECTORY}/bin/eacct")
add_compile_definitions(EAR_LIBRARY="${EAR_LIBRARY}")
add_compile_definitions(EAR_LIBRARY_DAEMON="${EAR_LIBRARY_DAEMON}")
add_compile_definitions(EAR_EACCT="${EAR_EACCT}")
message(STATUS "EAR directory: ${EAR_DIRECTORY}")
message(STATUS "EAR include directory: ${EAR_INCLUDE_DIRECTORY}")
message(STATUS "EAR library directory: ${EAR_LIBRARY_DIRECTORY}")
message(STATUS "EAR library: ${EAR_LIBRARY}")
message(STATUS "EAR library daemon: ${EAR_LIBRARY_DAEMON}")
message(STATUS "EAR library API: ${EAR_LIBRARY_API}")
message(STATUS "EAR eacct: ${EAR_EACCT}")

# Configure MPI
find_package(MPI REQUIRED)
set(MPI_INCLUDE_DIRECTORY "${MPI_CXX_INCLUDE_DIRS}")
set(MPI_LIBRARY "${MPI_CXX_LIBRARIES}")
set(MPI_MPIEXEC "/home/qub1/openmpi-cuda/bin/mpiexec")
if (NOT EXISTS ${MPI_MPIEXEC})
    find_program(MPI_MPIEXEC mpiexec)
endif ()
add_compile_definitions(MPI_MPIEXEC="${MPI_MPIEXEC}")
message(STATUS "MPI include directory: ${MPI_INCLUDE_DIRECTORY}")
message(STATUS "MPI library: ${MPI_LIBRARY}")
message(STATUS "MPI mpiexec: ${MPI_MPIEXEC}")

# Configure SQLite
find_package(SQLite3 REQUIRED)
set(SQLITE_INCLUDE_DIRECTORIES "${SQLite3_INCLUDE_DIRS}")
set(SQLITE_LIBRARY "${SQLite3_LIBRARIES}")
message(STATUS "SQLite3 include directories: ${SQLITE_INCLUDE_DIRECTORY}")
message(STATUS "SQLite3 libraries: ${SQLITE_LIBRARY}")

# Configure Boost
set(Boost_NO_BOOST_CMAKE "on")
find_package(Boost 1.67 REQUIRED COMPONENTS math_c99 program_options unit_test_framework serialization filesystem)
set(BOOST_INCLUDE_DIRECTORY "${Boost_INCLUDE_DIRS}")
set(BOOST_LIBRARIES_DIRECTORY "${Boost_LIBRARY_DIRS}")
set(BOOST_LIBRARY "${Boost_LIBRARIES}")
message(STATUS "Boost include directory: ${BOOST_INCLUDE_DIRECTORY}")
message(STATUS "Boost libraries directory: ${BOOST_LIBRARIES_DIRECTORY}")
message(STATUS "Boost library: ${BOOST_LIBRARY}")